/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package minigame;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Timer;
import specifications.Spec;

/**
 *
 * @author pedro.costa
 */
public class JPanel extends javax.swing.JPanel implements ActionListener, Spec {

    private Vaisseau vaisseau;
    private ArrayList<Asteroides> aste;
    private ArrayList<Missile> miss;
    private Timer timer;
    private final int DELAY = 10;
    private int i = 0;

    /**
     * Creates new form JPanel
     */
    public JPanel() {
        initComponents();
        initGame();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nbrVie = new javax.swing.JLabel();
        lblGameOver = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(900, 510));

        nbrVie.setBackground(new java.awt.Color(0, 0, 0));
        nbrVie.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        nbrVie.setForeground(new java.awt.Color(255, 255, 255));
        nbrVie.setToolTipText("");

        lblGameOver.setBackground(new java.awt.Color(0, 0, 0));
        lblGameOver.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        lblGameOver.setForeground(new java.awt.Color(255, 255, 255));
        lblGameOver.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(239, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblGameOver, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(236, 236, 236))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(nbrVie, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(405, 405, 405))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(nbrVie, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(150, 150, 150)
                .addComponent(lblGameOver, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 177, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    //Function init
    private void initGame() {
        addKeyListener(new TAdapter());
        setFocusable(true);
        setBackground(Color.BLACK);

        vaisseau = new Vaisseau(0, 0, 40, 40, 3);
        aste = new ArrayList<>();
        miss = new ArrayList<>();

        timer = new Timer(DELAY, this);
        timer.start();
    }

    //Publics functions
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        paintVaisseau(g);
        paintAsteroides(g);
        paintMissiles(g);
        paintInfo(g);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        vaisseau.move();

        generationAsteroides();

        for (Asteroides a : aste) {
            a.move();
        }

        for (int i = 0; i < aste.size(); i++) {
            if (aste.get(i).dead()) {
                aste.remove(i);
            }
            if (vaisseau.collision(aste.get(i))) {
                aste.remove(i);
            }
            if (miss.size() > 0) {
                for (int j = 0; j < miss.size(); j++) {
                    if (miss.get(j).collision(aste.get(i))) {
                        aste.remove(i);
                        miss.remove(j);
                    }
                }
            }
        }

        for (Missile m : miss) {
            m.move();
        }

        for (int i = 0; i < miss.size(); i++) {
            if (miss.get(i).dead()) {
                miss.remove(i);
            }
        }

        if (vaisseau.dead()) {
            timer.stop();
            aste.removeAll(aste);
            miss.removeAll(miss);
        }

        repaint();
    }

    //Privates functions
    private void generationAsteroides() {
        i += (int) (Math.random() * ((500) + 1));
        int vitesse = 1 + (int) (Math.random() * ((3 - 1) + 1));
        Asteroides asteroide = new Asteroides(GAME_WIDTH - 30, GAME_HEIGHT - i * 30, 30, 30, vitesse);
        aste.add(asteroide);
        if (i > 15) {
            i = 0;
        }
    }

    private void paintVaisseau(Graphics g) {
        
        try {
            BufferedImage img = ImageIO.read(new File("src/images/vaisseau.jpg"));            
            g.drawImage(img, vaisseau.getX(), vaisseau.getY(), vaisseau.getWidth(), vaisseau.getHeight(), this);
        } catch (IOException ex) {
            Logger.getLogger(JPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void paintAsteroides(Graphics g) {
        g.setColor(Color.gray);
        for (Asteroides a : aste) {
            g.fillOval(a.getX(), a.getY(), a.getWidth(), a.getHeight());
        }
    }

    private void paintMissiles(Graphics g) {
        g.setColor(Color.red);
        for (Missile m : miss) {
            g.fillRect(m.getX(), m.getY(), m.getWidth(), m.getHeight());
        }
    }

    private void paintInfo(Graphics g) {
        nbrVie.setText(vaisseau.getVie());
        if (vaisseau.dead()) {
            lblGameOver.setText("GAME OVER");
        }
    }

    //Classe priv√©e permettant l'utilisation des touches claviers.
    private class TAdapter extends KeyAdapter {

        @Override
        public void keyPressed(KeyEvent e) {
            vaisseau.keyPressed(e);

            if (e.getKeyCode() == KeyEvent.VK_SPACE && miss.size() < 3) {
                Missile m = new Missile(vaisseau.getX() + vaisseau.getWidth(), vaisseau.getY() + vaisseau.getHeight() / 2, 15, 5);
                miss.add(m);
            }
        }

        @Override
        public void keyReleased(KeyEvent e) {
            vaisseau.keyReleased(e);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblGameOver;
    private javax.swing.JLabel nbrVie;
    // End of variables declaration//GEN-END:variables
}
